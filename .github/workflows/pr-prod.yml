name: PROD Deployment

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-prod:
    name: Build PROD
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - run: npm install

  deploy-prod:
    name: Deploy PROD
    runs-on: ubuntu-latest
    needs: build-prod
    if: ${{ needs.build-prod.result == 'success' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 
      
    - name: Pre-tag commit before deployment
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        DATE=$(date +'%d%m%Y')
        VERSION_TAG="prod-${DATE}-${SHORT_SHA}"
    
        echo "Tagging release as $VERSION_TAG"
        git config --global user.email "ci-bot@github.com"
        git config --global user.name "CI Bot"
        git tag $VERSION_TAG
        git push origin $VERSION_TAG
        
    - name: Deploy PROD
      run: echo "Deploying to PROD environment..."

  test-sanity-prod:
    name: Test PROD sanity
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: ${{ needs.deploy-prod.result == 'success' }}

    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - run: npm install
    
    - name: Start PROD server
      run: |
        node server.js &
        sleep 3
    
    - name: Run PROD health check
      run: |
        chmod +x __tests__/sanity.sh
        __tests__/sanity.sh
    
    - name: Stop PROD server
      run: pkill -f "node server.js" || true

  rollback-prod:
    name: Rollback PROD
    runs-on: ubuntu-latest
    needs: test-sanity-prod
    if: ${{ needs.test-sanity-prod.result == 'failure' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
  
    # - name: Checkout stable prod commit
    #   run: |
    #     git fetch --tags
    #     echo "Rolling back to prod-stable"
    #     git checkout prod-stable
    #     # deploy to PROD

    - name: Checkout last stable PROD release
      run: |
        git config --global user.email "ci-bot@github.com"
        git config --global user.name "CI Bot"

        git fetch origin --tags  
        echo "Rolling back to prod-stable..."
        git checkout prod-stable

  tag-prod:
    name: Tag PROD Release
    runs-on: ubuntu-latest
    needs: test-sanity-prod
    if: ${{ needs.test-sanity-prod.result == 'success' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Move prod-stable tag
      run: |
        git config --global user.email "ci-bot@github.com"
        git config --global user.name "CI Bot"
        git tag -f prod-stable ${{ env.VERSION_TAG }}
        git push origin -f prod-stable

  slack-notify:
    name: send Slack message
    needs: tag-prod
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get job status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "STATUS=✅ Deployment succeeded" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "STATUS=❌ Deployment failed" >> $GITHUB_OUTPUT
          else
            echo "STATUS=⚠️ Deployment status unknown" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ steps.status.outputs.STATUS }} for *${{ github.workflow }}* on *${{ github.ref_name }}*.\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View run>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
